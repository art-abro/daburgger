name: Deploy prod (S3 + CloudFront)

on:
  push:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # ðŸ”Ž Debug what the runner reports
      - name: Show repo/ref
        run: |
          echo "REPO=$GITHUB_REPOSITORY"
          echo "REF=$GITHUB_REF"

      - name: Show OIDC claims (aud, sub, repository, ref)
        shell: bash
        run: |
          sudo apt-get update -y && sudo apt-get install -y jq
          TOKEN="$(curl -sSL -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=sts.amazonaws.com" | jq -r '.value')"
          echo "$TOKEN" | awk -F. '{print $2}' | base64 -d 2>/dev/null | jq '{aud, sub, repository, ref}'

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Upload assets with long cache
      - name: Sync assets
        run: |
          aws s3 sync assets s3://${{ secrets.S3_BUCKET_PROD }}/assets \
            --delete \
            --cache-control "public, max-age=31536000, immutable"

      # Upload HTML with no-cache + correct content-type
      - name: Upload HTML
        run: |
          for f in index.html admin.html architecture.html; do
            if [ -f "$f" ]; then
              aws s3 cp "$f" "s3://${{ secrets.S3_BUCKET_PROD }}/$f" \
                --metadata-directive REPLACE \
                --cache-control "no-store, no-cache, must-revalidate" \
                --content-type "text/html";
            fi
          done

      # Invalidate HTML and root
      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CF_DIST_ID_PROD }} \
            --paths "/" "/index.html" "/admin.html" "/architecture.html"
